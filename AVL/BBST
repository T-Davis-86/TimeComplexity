import random # Importing random number generator
import time   # Importing time to do performance evaluation on structure functions
import matplotlib.pyplot as plt # Used for graphing the performance
import numpy as np # used for plots that are used in the graphing

# Creates the node class with the additional attribute "height"
class Node:
  def __init__(self, key):
      self.value = key
      self.left = None
      self.right = None
      self.height = 1  # New attribute to store the height of the node

# Creates the Balanced Binary Search Tree
class Binary_Tree:
  def __init__(self, value):
      self.root = Node(value)

  # Inserting a new node into the BBST
  def insert(self, root, value):
      if root is None:
          return Node(value)
      if value < root.value:
          root.left = self.insert(root.left, value)
      elif value > root.value:
          root.right = self.insert(root.right, value)
      # gives the new node its height inside the tree
      root.height = 1 + max(self.height(root.left), self.height(root.right))
      return self.balance_tree(root)

  # Method is used to balance the tree
  def balance_tree(self, root):
      if root is None:
          return root
      # Checks the balance of the tree
      balance = self.balance(root)
      # Left sub-tree is greater than right by more than 1
      if balance > 1:
          if root.left is not None and self.balance(root.left) < 0:
              root.left = self.left_rotate(root.left)
          return self.right_rotate(root)
      # Right sub-tree is greater than one
      if balance < -1:
          if root.right is not None and self.balance(root.right) > 0:
              root.right = self.right_rotate(root.right)
          return self.left_rotate(root)
      return root

  # Method used for rotating nodes to balance out the bbst
  def left_rotate(self, node):
      new_child = node.right # Stores the value to the right as the new root for the sub-tree as new variable
      old_child = new_child.left # Stores the new value for as the new root.left as the old root
      new_child.left = node # The old root now becomes the the child to the left
      node.right = old_child # The old root.right now becomes the new root.right
#                              from this: 55       to:     55
#                                       /    \            /  \
#                                      40    60          50   60
#                                     /  \              /  \
#                                         50           40   54
#                                        /  \
#                                            54
      node.height = 1 + max(self.height(node.left), self.height(node.right)) # Gives the new children nodes their new heights
      new_child.height = 1 + max(self.height(new_child.left), self.height(new_child.right)) # Gives the root of the sub-tree its new height
      return new_child

  # method used for rotating nodes to balance out the bbst
  def right_rotate(self, node):
      new_child = node.left # Stores The root.left as the new root for the sub tree
      old_child = new_child.right # Creates the link form the root to the right
      new_child.right = node # sets the root.left as the new root for the sub_tree
      node.left = old_child # The old root.left now becomes the new root.left
#                            from this:   55       to:     55
#                                       /    \            /  \
#                                      40    60          30   60
#                                     /  \              /  \
#                                    30                20   40
#                                   /  \
#                                  20
      node.height = 1 + max(self.height(node.left), self.height(node.right))
      new_child.height = 1 + max(self.height(new_child.left), self.height(new_child.right))
      return new_child

  # This method traverses the tree and gets the height of the node
  def height(self, root):
      if root is None:
          return 0
      return root.height

  # This method checks the balance of the bbst by add up the levels from each left and right sub-trees
  def balance(self, root):
      if root is None:
          return 0
      return self.height(root.left) - self.height(root.right)

  # Method is used to search for a specific value in the tree
  def search_tree(self, root, value):
      if root is None:
          return False
      if root.value == value:
          return True
      return self.search_tree(root.left, value) or self.search_tree(root.right, value)

  # Method is used to display the tree
  def print_inorder(self, root):
    if root:
        # Traverse the left subtree
        self.print_inorder(root.left)
        # Print the current node's value
        print(root.value, end=' ')
        # Traverse the right subtree
        self.print_inorder(root.right)

  # Method is used to delete a node from the tree
  def delete_leaf(self, root, key):
      if root is None:
          return root
      if key < root.value:
          root.left = self.delete_leaf(root.left, key)
      elif key > root.value:
          root.right = self.delete_leaf(root.right, key)
      else:
          if root.left is None:
              return root.right
          elif root.right is None:
              return root.left
          min_right = self.minimum_value(root.right)
          root.value = min_right
          root.right = self.delete_leaf(root.right, min_right)
      return root

  # Method is used to find the min value in the tree
  def minimum_value(self, root, current_minimum = 0):
    if root is None:
        return current_minimum
    current_minimum = min(current_minimum, root.value)
    left_minimum = self.minimum_value(root.left, current_minimum)
    right_minimum = self.minimum_value(root.right, current_minimum)
    return min(left_minimum, right_minimum)

  # Method is used to find the max value in the tree
  def maximum_value(self, root, current_maximum=0):
    if root is None:
        return current_maximum
    current_maximum = max(current_maximum, root.value)
    left_maximum = self.maximum_value(root.left, current_maximum)
    right_maximum = self.maximum_value(root.right, current_maximum)
    return max(left_maximum, right_maximum)

# Function designed to time the performance of each action
def performance_test(root,action,value = 0):
  if action == "insert":
    in_time1 = time.time()
    bbst.insert(root,value)
    in_time2 = time.time()
    in_time = in_time2 - in_time1
    insert_times.append(in_time)
  elif action == "search":
    in_time1 = time.time()
    bbst.search_tree(root, value)
    in_time2 = time.time()
    in_time = in_time2 - in_time1
    search_times.append(in_time)
  elif action == "delete min":
    in_time1 = time.time()
    bbst.delete_leaf(root, value)
    in_time2 = time.time()
    in_time = in_time2 - in_time1
    delete_min_times.append(in_time)
  elif action == "delete max":
    in_time1 = time.time()
    bbst.delete_leaf(root, value)
    in_time2 = time.time()
    in_time = in_time2 - in_time1
    delete_max_times.append(in_time)
  elif action == "delete root":
    in_time1 = time.time()
    bbst.delete_leaf(root, value)
    in_time2 = time.time()
    in_time = in_time2 - in_time1
    delete_root_times.append(in_time)
  elif action == "find max":
    in_time1 = time.time()
    bbst.maximum_value(root)
    in_time2 = time.time()
    in_time = in_time2 - in_time1
    max_times.append(in_time)
  elif action == "find min":
    in_time1 = time.time()
    bbst.minimum_value(root)
    in_time2 = time.time()
    in_time = in_time2 - in_time1
    min_times.append(in_time)

# This function is for setting up and graphing the plot points from the performance function
def get_graph(x,y,title):
  xpoints = np.array(x)
  ypoints = np.array(y)
  plt.scatter(xpoints, ypoints)
  plt.title(title)
  plt.xlabel("Number of nodes")
  plt.ylabel("Time to process")
  plt.show()

# Initializing number of nodes and creating lists for the performance variable to be appended to
num_nodes = 5
t_times = []
max_times = []
min_times = []
delete_min_times = []
delete_root_times = []
delete_max_times = []
search_times = []
insert_times = []

# Using a While loop to increment each cycle until reaching the desired amount of nodes
while num_nodes <= 100000:
  t_times.append(num_nodes)
  root_value = num_nodes // 2
  # Initalizing the tree
  bbst = Binary_Tree(root_value)
  keys = []
  for i in range(num_nodes):
      keys.append(random.randint(1,100))
  random.shuffle(keys)
  # Adding new nodes to the bbst
  for key in keys:
      if key == root_value:
          continue
      else:
          bbst.root = bbst.insert(bbst.root, key)

  # Finding the min and max for when it comes to deleting performance
  mini = bbst.minimum_value(bbst.root)
  maxi = bbst.maximum_value(bbst.root)

  # Getting the Max Value from the tree
  performance_test(bbst.root,"find max")
  performance_test(bbst.root,"find min")

  # Searching for a node in the tree
  performance_test(bbst.root,"search",random.randint(1,100))

  # Deleting a node from the tree
  performance_test(bbst.root,"delete min",mini)
  performance_test(bbst.root,"delete max",maxi)
  performance_test(bbst.root,"delete root",bbst.root.value)

  # Inserting a new value into the tree
  performance_test(bbst.root,"insert",random.randint(1, 100))

  #tree.display_tree(tree.root)
  num_nodes += 500

# Calls the get_graph() to build and display graph
get_graph(t_times,min_times,"Finding Minimum Value Node")
get_graph(t_times,max_times,"Finding Max Value Node")
get_graph(t_times,search_times, "Search For a Value")
get_graph(t_times, delete_min_times, "Deleting Min Value Node")
get_graph(t_times, delete_root_times, "Deleting Root Nodes")
get_graph(t_times, delete_max_times, "Deleteing Max Value Nodes")
get_graph(t_times,insert_times,"Inserting a New Node" )
